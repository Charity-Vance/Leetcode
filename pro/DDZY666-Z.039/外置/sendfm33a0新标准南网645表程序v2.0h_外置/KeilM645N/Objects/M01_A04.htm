<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\M01_A04.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\M01_A04.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Sep 15 09:57:23 2021
<BR><P>
<H3>Maximum Stack Usage =       2372 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SystemInit &rArr; main &rArr; Comm_Event_Proc &rArr; Uart_Proc &rArr; JudgeSwitch2 &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ADC_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[19]">AES_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[1e]">BT1_IRQHandler</a> from interrupt.o(i.BT1_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[1f]">BT2_IRQHandler</a> from interrupt.o(i.BT2_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[1d]">COMP_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[18]">DISP_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[1b]">DMA_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[20]">ETIMER1_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[21]">ETIMER2_IRQHandler</a> from interrupt.o(i.ETIMER2_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[22]">ETIMER3_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[23]">ETIMER4_IRQHandler</a> from interrupt.o(i.ETIMER4_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[a]">FDET_IRQHandler</a> from interrupt.o(i.FDET_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[24]">GPIO_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[c]">HSPI_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupt.o(i.HardFault_Handler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[17]">I2C_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[1a]">LPTIM_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupt.o(i.NMI_Handler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[9]">NVMIF_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from interrupt.o(i.RTC_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[d]">SPI1_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[e]">SPI2_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[7]">SVD_IRQHandler</a> from interrupt.o(i.SVD_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_fm32l0xx3.o(i.SystemInit) referenced from startup_fm32l0xx.o(.text)
 <LI><a href="#[1c]">TRNG_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from interrupt.o(i.UART2_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[13]">UART4_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[14]">UART5_IRQHandler</a> from interrupt.o(i.UART5_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[15]">USART0_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[16]">USART1_IRQHandler</a> from startup_fm32l0xx.o(.text) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[6]">WWDT_IRQHandler</a> from interrupt.o(i.WWDT_IRQHandler) referenced from startup_fm32l0xx.o(RESET)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_fm32l0xx.o(.text)
 <LI><a href="#[28]">isPowerOff</a> from init.o(i.isPowerOff) referenced from u7816.o(i.ColdReset)
 <LI><a href="#[25]">main</a> from mainproc.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(.text)
</UL>
<P><STRONG><a name="[1e5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DISP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ETIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ETIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NVMIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Load_Point
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_K
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ib_K
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Dl_G
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Dl_G
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[1ed]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_G_Dot
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Load_Point
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uip_Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_G_Dot
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCover_Check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MeterId
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feik_Num_Verify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Week_Holiday_Verify
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Overflow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Dl_G
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIPF
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdNo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Chk_Heart
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Reg_Verify
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Nv_Ram
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCResult
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCResult
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_l2d</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_d2lz</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2lz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2ulz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCResult
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1f6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[36]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3e]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3d]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>ADC_ChannelSel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.ADC_ChannelSel))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[1a7]"></a>ADC_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[1a6]"></a>ADC_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[1a5]"></a>ADC_ITDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.ADC_ITDisable))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[1a0]"></a>ADC_SetTrim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.ADC_SetTrim))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[4f]"></a>ATT7051SPIOp</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, uenergy-at.o(i.ATT7051SPIOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATT7051SPIOp &rArr; EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuRegOp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIPF
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ib_K
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051WRPRO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[56]"></a>ATT7051WRPRO</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uenergy-at.o(i.ATT7051WRPRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ATT7051WRPRO &rArr; ATT7051SPIOp &rArr; EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
</UL>

<P><STRONG><a name="[57]"></a>ATT7051_Check</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, uenergy-at.o(i.ATT7051_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ATT7051_Check &rArr; Emu_Reg_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Reg_Verify
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Para_Verify
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Adj
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051WRPRO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Event_Proc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Meter_Chip
</UL>

<P><STRONG><a name="[5b]"></a>Adc_Proc</STRONG> (Thumb, 3814 bytes, Stack size 176 bytes, init.o(i.Adc_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = Adc_Proc &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcRTrimVal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCResult
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[6d]"></a>AddNClock</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, init.o(i.AddNClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AddNClock &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
</UL>

<P><STRONG><a name="[71]"></a>Add_Min_Clock</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, uartx.o(i.Add_Min_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Add_Min_Clock &rArr; ClockAddOne &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockAddOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
</UL>

<P><STRONG><a name="[73]"></a>AltFunIO</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, verify.o(i.AltFunIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AltFunIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterIC_RST1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Pulse
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[76]"></a>AnalogIO</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, verify.o(i.AnalogIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AnalogIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
</UL>

<P><STRONG><a name="[77]"></a>Auth_In_Out</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, u7816.o(i.Auth_In_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Auth_In_Out &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
</UL>

<P><STRONG><a name="[7a]"></a>Authorization</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, u7816.o(i.Authorization))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Authorization &rArr; Auth_In_Out &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
</UL>

<P><STRONG><a name="[1e]"></a>BT1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, interrupt.o(i.BT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BT2_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, interrupt.o(i.BT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>BUF4TST_BypassDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.BUF4TST_BypassDisable))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[1a1]"></a>BUF4TST_BypassEn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.BUF4TST_BypassEn))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[1a3]"></a>BUF4TST_ChannelSel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.BUF4TST_ChannelSel))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[10c]"></a>BUF4TST_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.BUF4TST_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
</UL>

<P><STRONG><a name="[1a2]"></a>BUF4TST_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.BUF4TST_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
</UL>

<P><STRONG><a name="[7f]"></a>Backup_Para_7051</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uenergy-at.o(i.Backup_Para_7051))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Backup_Para_7051 &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[81]"></a>Bcd2Hex</STRONG> (Thumb, 128 bytes, Stack size 128 bytes, rtc.o(i.Bcd2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
</UL>

<P><STRONG><a name="[83]"></a>Bcd2Hex_LS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.Bcd2Hex_LS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Bcd2Hex_LS &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_K
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ib_K
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[85]"></a>Bcd2Hex_SS</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rtc.o(i.Bcd2Hex_SS))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Bcd2Hex_SS &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
</UL>

<P><STRONG><a name="[6e]"></a>Bcd_To_Hex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.Bcd_To_Hex))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsMin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockAddOne
</UL>

<P><STRONG><a name="[1b1]"></a>BitValue</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uartx.o(i.BitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
</UL>

<P><STRONG><a name="[86]"></a>Bkdl_Verify</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, verify.o(i.Bkdl_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Bkdl_Verify &rArr; Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
</UL>

<P><STRONG><a name="[89]"></a>Ble_Chk_Heart</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uartx.o(i.Ble_Chk_Heart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ble_Chk_Heart &rArr; Ble_Frame_Cs &rArr; Cal_ChkSum
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Frame_Cs
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[8a]"></a>Ble_Frame_Cs</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, uartx.o(i.Ble_Frame_Cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ble_Frame_Cs &rArr; Cal_ChkSum
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Chk_Heart
</UL>

<P><STRONG><a name="[8b]"></a>Ble_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, uartx.o(i.Ble_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ble_Init &rArr; Ble_Chk_Heart &rArr; Ble_Frame_Cs &rArr; Cal_ChkSum
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Chk_Heart
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[8c]"></a>Ble_Rst</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uartx.o(i.Ble_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ble_Rst &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[1cc]"></a>Ble_Rst_Judge</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uartx.o(i.Ble_Rst_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[18b]"></a>Byte2Short</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.Byte2Short))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
</UL>

<P><STRONG><a name="[54]"></a>Byte2uInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc.o(i.Byte2uInt))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Response
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdNo
</UL>

<P><STRONG><a name="[18c]"></a>Byte2uShort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.Byte2uShort))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
</UL>

<P><STRONG><a name="[8f]"></a>CalLoad</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, money.o(i.CalLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = CalLoad &rArr; InitVolSts &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[91]"></a>CalZhuhe</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, uartx.o(i.CalZhuhe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalZhuhe
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[50]"></a>Cal_ChkSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uartx.o(i.Cal_ChkSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cal_ChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Frame_Cs
</UL>

<P><STRONG><a name="[92]"></a>Cal_Comb</STRONG> (Thumb, 636 bytes, Stack size 448 bytes, uartx.o(i.Cal_Comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
</UL>

<P><STRONG><a name="[97]"></a>Cal_Comb_Usedl</STRONG> (Thumb, 332 bytes, Stack size 136 bytes, uartx.o(i.Cal_Comb_Usedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = Cal_Comb_Usedl &rArr; Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[9a]"></a>Cal_Mac_Pro</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, u7816.o(i.Cal_Mac_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Cal_Mac_Pro &rArr; Read_Kx &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[9b]"></a>Cal_Pav</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, uenergy-at.o(i.Cal_Pav))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Cal_Pav &rArr; Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
</UL>

<P><STRONG><a name="[9c]"></a>CalcAbsDay</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, event.o(i.CalcAbsDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcAbsDay
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[9d]"></a>CalcAbsMin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event.o(i.CalcAbsMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcAbsMin
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[9e]"></a>CalcTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, event.o(i.CalcTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalcTime &rArr; CalcAbsDay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsMin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
</UL>

<P><STRONG><a name="[9f]"></a>Calc_Pwr_Proc</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, money.o(i.Calc_Pwr_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = Calc_Pwr_Proc &rArr; Rpdl_Verify &rArr; Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rpdl_Verify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit_Critical
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[5a]"></a>Calculate_Adj</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, uenergy-at.o(i.Calculate_Adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calculate_Adj
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
</UL>

<P><STRONG><a name="[a5]"></a>Calculate_Ah</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, uartx.o(i.Calculate_Ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Calculate_Ah &rArr; Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
</UL>

<P><STRONG><a name="[a6]"></a>Calculate_Dl_G</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, money.o(i.Calculate_Dl_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Calculate_Dl_G &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
</UL>

<P><STRONG><a name="[1bc]"></a>Calculate_Min</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, interrupt.o(i.Calculate_Min))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[a7]"></a>Calculate_Overflow</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, money.o(i.Calculate_Overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Calculate_Overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[a8]"></a>Calculate_Program_Cs</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uartx.o(i.Calculate_Program_Cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Calculate_Program_Cs &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[aa]"></a>Calculate_Timer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uartx.o(i.Calculate_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Calculate_Timer &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
</UL>

<P><STRONG><a name="[79]"></a>CardTxRxFrame</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, u7816.o(i.CardTxRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snd_7816_Byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Err_Report
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
</UL>

<P><STRONG><a name="[af]"></a>Changecontrol_Process</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tariff.o(i.Changecontrol_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = Changecontrol_Process &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[1d3]"></a>CheckNvicIrqEn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, verify.o(i.CheckNvicIrqEn))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Wwdt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1
</UL>

<P><STRONG><a name="[12a]"></a>CheckSysReg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, verify.o(i.CheckSysReg))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Disp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Clk_Gen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Pulse
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Wwdt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_U7816
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_I2c
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1
</UL>

<P><STRONG><a name="[b7]"></a>Check_Err_Pro</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, uenergy-at.o(i.Check_Err_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = Check_Err_Pro &rArr; Gain_Adjust &rArr; UIP_K &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ib_K
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Para_7051
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[c0]"></a>ChkBufZero</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtc.o(i.ChkBufZero))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Reg_Verify
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
</UL>

<P><STRONG><a name="[bd]"></a>ChkLastclockerrRcdTime</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uartx.o(i.ChkLastclockerrRcdTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ChkLastclockerrRcdTime &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[c1]"></a>ChkPdRcdTime</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, uenergy-at.o(i.ChkPdRcdTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ChkPdRcdTime &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[c2]"></a>ClearPloadRec</STRONG> (Thumb, 394 bytes, Stack size 176 bytes, event.o(i.ClearPloadRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = ClearPloadRec &rArr; SynFlashRec &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[c6]"></a>Clear_Meter</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, u7816.o(i.Clear_Meter))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = Clear_Meter &rArr; Process_Usedl &rArr; Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2_Pcount
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1_Pcount
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Commu_Relaydata
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[d2]"></a>Clear_Nv_Ram</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init.o(i.Clear_Nv_Ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_Nv_Ram
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Judge
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
</UL>

<P><STRONG><a name="[d3]"></a>Clear_Rand_Gene</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, u7816.o(i.Clear_Rand_Gene))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Clear_Rand_Gene &rArr; EsamReset &rArr; CloseEsam &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
</UL>

<P><STRONG><a name="[159]"></a>Clear_W_Wdt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init.o(i.Clear_W_Wdt))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_IRQHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[51]"></a>Clear_Wdt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, init.o(i.Clear_Wdt))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSleepCFG
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snd_7816_Byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
</UL>

<P><STRONG><a name="[67]"></a>Clk_Adj_Proc</STRONG> (Thumb, 726 bytes, Stack size 80 bytes, init.o(i.Clk_Adj_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Clk_Adj_Proc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCHF_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[72]"></a>ClockAddOne</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uartx.o(i.ClockAddOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ClockAddOne &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
</UL>

<P><STRONG><a name="[d7]"></a>CloseEsam</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, u7816.o(i.CloseEsam))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CloseEsam &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[d9]"></a>CloseFlash</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c.o(i.CloseFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CloseFlash &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[da]"></a>Close_And_ClearIRQ</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.Close_And_ClearIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Close_And_ClearIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
</UL>

<P><STRONG><a name="[dd]"></a>Close_None_GPIO</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, verify.o(i.Close_None_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Close_None_GPIO &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[d8]"></a>CloseeIO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, verify.o(i.CloseeIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_I2C_IO
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_None_GPIO
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
</UL>

<P><STRONG><a name="[df]"></a>Closerelay</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, money.o(i.Closerelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = Closerelay &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
</UL>

<P><STRONG><a name="[e0]"></a>Closerelay1</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, money.o(i.Closerelay1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Closerelay1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>

<P><STRONG><a name="[c7]"></a>ClrRecTimes</STRONG> (Thumb, 1314 bytes, Stack size 88 bytes, event.o(i.ClrRecTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ClrRecTimes &rArr; Init_Metererrstatus &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportdata
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[c9]"></a>Clr_Commu_Relaydata</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uartx.o(i.Clr_Commu_Relaydata))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
</UL>

<P><STRONG><a name="[e6]"></a>Clr_Otherdata</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uartx.o(i.Clr_Otherdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Clr_Otherdata &rArr; Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
</UL>

<P><STRONG><a name="[e4]"></a>Clr_Reportdata</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uartx.o(i.Clr_Reportdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clr_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Response
</UL>

<P><STRONG><a name="[e5]"></a>Clr_Reportnum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uartx.o(i.Clr_Reportnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clr_Reportnum
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Response
</UL>

<P><STRONG><a name="[c8]"></a>Clr_Zero_Data</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uartx.o(i.Clr_Zero_Data))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[f4]"></a>Cmp_Bcd_Inv</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, rtc.o(i.Cmp_Bcd_Inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_Bcd_Inv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Psw
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[14a]"></a>Cmp_Clock</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rtc.o(i.Cmp_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
</UL>

<P><STRONG><a name="[7c]"></a>Cmp_Data</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rtc.o(i.Cmp_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Meter_Id
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[e8]"></a>Cmp_Meter_Id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, u7816.o(i.Cmp_Meter_Id))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cmp_Meter_Id &rArr; Cmp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
</UL>

<P><STRONG><a name="[e9]"></a>ColdReset</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, u7816.o(i.ColdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ColdReset &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPowerOff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Edge
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
</UL>

<P><STRONG><a name="[ec]"></a>CommReadCalData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uenergy-at.o(i.CommReadCalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CommReadCalData &rArr; Comm_Read_Reg &rArr; ATT7051SPIOp &rArr; EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[ee]"></a>CommSetRtc</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, uartx.o(i.CommSetRtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = CommSetRtc &rArr; CommSetRtc_Adj &rArr; ClearPloadRec &rArr; SynFlashRec &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[f2]"></a>CommSetRtc_Adj</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, uartx.o(i.CommSetRtc_Adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = CommSetRtc_Adj &rArr; ClearPloadRec &rArr; SynFlashRec &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[f7]"></a>CommWriteCalData</STRONG> (Thumb, 678 bytes, Stack size 72 bytes, uenergy-at.o(i.CommWriteCalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = CommWriteCalData &rArr; Check_Err_Pro &rArr; Gain_Adjust &rArr; UIP_K &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIPF
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ib_K
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Para_7051
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1cd]"></a>Comm_Auth_Judge</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartx.o(i.Comm_Auth_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[fa]"></a>Comm_Calculate_Comp_Rp</STRONG> (Thumb, 392 bytes, Stack size 176 bytes, uartx.o(i.Comm_Calculate_Comp_Rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Comm_Calculate_Comp_Rp &rArr; Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Overflow
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[fc]"></a>Comm_Calculate_Dl</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, uartx.o(i.Comm_Calculate_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Comm_Calculate_Dl &rArr; Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[fd]"></a>Comm_Event_Proc</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, mainproc.o(i.Comm_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2364<LI>Call Chain = Comm_Event_Proc &rArr; Uart_Proc &rArr; JudgeSwitch2 &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEvent
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>Comm_Read_Reg</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uenergy-at.o(i.Comm_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Comm_Read_Reg &rArr; ATT7051SPIOp &rArr; EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommReadCalData
</UL>

<P><STRONG><a name="[f8]"></a>Comm_Write_Reg</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, uenergy-at.o(i.Comm_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = Comm_Write_Reg &rArr; Backup_Para_7051 &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Para_7051
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051WRPRO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[101]"></a>Commaddr_Verify</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, verify.o(i.Commaddr_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Commaddr_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[103]"></a>Commmodule_Check</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, iokey.o(i.Commmodule_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = Commmodule_Check &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTicks
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[6a]"></a>Comp_RpdltoEepromBuf</STRONG> (Thumb, 98 bytes, Stack size 232 bytes, event.o(i.Comp_RpdltoEepromBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Comp_RpdltoEepromBuf &rArr; CalZhuhe
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[107]"></a>Config_ShiQuLad_Proc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tariff.o(i.Config_ShiQuLad_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Config_ShiQuLad_Proc &rArr; ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
</UL>

<P><STRONG><a name="[109]"></a>Config_Shiduan_Process</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, tariff.o(i.Config_Shiduan_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Config_Shiduan_Process &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[10a]"></a>Configure_Register_Sleep</STRONG> (Thumb, 1180 bytes, Stack size 8 bytes, interrupt.o(i.Configure_Register_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Configure_Register_Sleep &rArr; Disable_I2C_IO &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_Disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_I2C_IO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_And_ClearIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_None_GPIO
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[111]"></a>Cover_Check</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, iokey.o(i.Cover_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Cover_Check &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[c5]"></a>Crc_16Bits</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, verify.o(i.Crc_16Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Crc_16Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Load_Point
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
</UL>

<P><STRONG><a name="[a3]"></a>Crc_16Bits_Add2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, verify.o(i.Crc_16Bits_Add2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Crc_16Bits_Add2 &rArr; Crc_16Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
</UL>

<P><STRONG><a name="[112]"></a>Crc_Check</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, verify.o(i.Crc_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Crc_Check &rArr; Crc_16Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
</UL>

<P><STRONG><a name="[113]"></a>Decrypt</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, uartx.o(i.Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Decrypt &rArr; Update_ESAM_Bin_Mac &rArr; WriteBinWithMac &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
</UL>

<P><STRONG><a name="[8d]"></a>Delay_Initial</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, init.o(i.Delay_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IxRMSOS_Adjust
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
</UL>

<P><STRONG><a name="[ab]"></a>Delay_Netu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, u7816.o(i.Delay_Netu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snd_7816_Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Edge
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[11a]"></a>DeviceSleepCFG</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, interrupt.o(i.DeviceSleepCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceSleepCFG
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[10d]"></a>Disable_I2C_IO</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, verify.o(i.Disable_I2C_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Disable_I2C_IO &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[11b]"></a>Disable_Pulse</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, verify.o(i.Disable_Pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Disable_Pulse &rArr; InputtIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[11c]"></a>Disp_Dl_G_Dot</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, lcd.o(i.Disp_Dl_G_Dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Disp_Dl_G_Dot &rArr; Lcd_Show_N &rArr; LCD_Num_Data &rArr; LCD_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[11e]"></a>Disp_Pw_Dot</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd.o(i.Disp_Pw_Dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Disp_Pw_Dot &rArr; Lcd_Show_N &rArr; LCD_Num_Data &rArr; LCD_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Byte
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[196]"></a>Disp_Time_Dot</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lcd.o(i.Disp_Time_Dot))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[120]"></a>Display_Para_Verify</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, verify.o(i.Display_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Display_Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[121]"></a>Displayitem_Verify</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, verify.o(i.Displayitem_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Displayitem_Verify &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[122]"></a>Displaykey_Check</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, iokey.o(i.Displaykey_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = Displaykey_Check &rArr; Enable_Closerelay &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[123]"></a>Displaykey_Process</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, iokey.o(i.Displaykey_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Displaykey_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[125]"></a>Dl_Check</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, verify.o(i.Dl_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dl_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
</UL>

<P><STRONG><a name="[69]"></a>DltoEepromBuf</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, event.o(i.DltoEepromBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DltoEepromBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[21]"></a>ETIMER2_IRQHandler</STRONG> (Thumb, 1768 bytes, Stack size 16 bytes, interrupt.o(i.ETIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ETIMER4_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, interrupt.o(i.ETIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMER4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EmuRegOp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uenergy-at.o(i.EmuRegOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>

<P><STRONG><a name="[58]"></a>Emu_Para_Verify</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uenergy-at.o(i.Emu_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Emu_Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
</UL>

<P><STRONG><a name="[59]"></a>Emu_Reg_Verify</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, uenergy-at.o(i.Emu_Reg_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Emu_Reg_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
</UL>

<P><STRONG><a name="[124]"></a>Enable_Closerelay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iokey.o(i.Enable_Closerelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Enable_Closerelay &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Check
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
</UL>

<P><STRONG><a name="[128]"></a>Enable_I2C_IO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, verify.o(i.Enable_I2C_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Enable_I2C_IO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[176]"></a>Enable_Led_IO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, verify.o(i.Enable_Led_IO))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[129]"></a>Enable_Pulse</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, verify.o(i.Enable_Pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Enable_Pulse &rArr; AltFunIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[12b]"></a>Energy_Event_Proc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mainproc.o(i.Energy_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = Energy_Event_Proc &rArr; Read_UIP &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Enter_Critical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, money.o(i.Enter_Critical))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>

<P><STRONG><a name="[d4]"></a>EsamReset</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, u7816.o(i.EsamReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EsamReset &rArr; CloseEsam &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Err_Report
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
</UL>

<P><STRONG><a name="[ae]"></a>Esam_Err_Report</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, u7816.o(i.Esam_Err_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Esam_Err_Report &rArr; Set_Reportdata
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[12f]"></a>Esam_Para_Verify</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, verify.o(i.Esam_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Esam_Para_Verify &rArr; FailKey &rArr; SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
</UL>

<P><STRONG><a name="[6b]"></a>Event_Record</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, event.o(i.Event_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[53]"></a>Exchange</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event.o(i.Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacExchange
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopExchange
</UL>

<P><STRONG><a name="[a2]"></a>Exit_Critical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, money.o(i.Exit_Critical))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>

<P><STRONG><a name="[a]"></a>FDET_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, interrupt.o(i.FDET_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>Factory_Init</STRONG> (Thumb, 934 bytes, Stack size 88 bytes, u7816.o(i.Factory_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Factory_Init &rArr; ClrRecTimes &rArr; Init_Metererrstatus &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[131]"></a>FailKey</STRONG> (Thumb, 42 bytes, Stack size 72 bytes, u7816.o(i.FailKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = FailKey &rArr; SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
</UL>

<P><STRONG><a name="[61]"></a>Fill_RTC_RT_TAdc</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, verify.o(i.Fill_RTC_RT_TAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Fill_RTC_RT_TAdc &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[62]"></a>Fill_RTC_RT_TVal</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, verify.o(i.Fill_RTC_RT_TVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Fill_RTC_RT_TVal &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[108]"></a>FindSQ</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tariff.o(i.FindSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FindSQ &rArr; Sequence &rArr; Cmp_Bcd_Inv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
</UL>

<P><STRONG><a name="[c4]"></a>FindSpecPos</STRONG> (Thumb, 238 bytes, Stack size 120 bytes, event.o(i.FindSpecPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = FindSpecPos &rArr; GetRecAddr &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
</UL>

<P><STRONG><a name="[1ad]"></a>Find_EventTable</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uartx.o(i.Find_EventTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_EventTable
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[139]"></a>FlashID</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, i2c.o(i.FlashID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashID
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx_Byte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Rx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
</UL>

<P><STRONG><a name="[13c]"></a>FlashID_Comm</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, i2c.o(i.FlashID_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FlashID_Comm &rArr; OpenFlash &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx_Byte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Rx_Byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[13e]"></a>Flash_Page_Write</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, i2c.o(i.Flash_Page_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Flash_Page_Write &rArr; Flashaddr &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx_Byte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Rx_Byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
</UL>

<P><STRONG><a name="[141]"></a>Flash_RdSR1</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, i2c.o(i.Flash_RdSR1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_RdSR1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx_Byte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Rx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WREN
</UL>

<P><STRONG><a name="[95]"></a>Flash_Rd_Bottom</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, i2c.o(i.Flash_Rd_Bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Flash_Rd_Bottom &rArr; Flashaddr &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Rx_Byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[142]"></a>Flash_Sector_Erase</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, i2c.o(i.Flash_Sector_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_Sector_Erase &rArr; Flashaddr &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
</UL>

<P><STRONG><a name="[143]"></a>Flash_WREN</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, i2c.o(i.Flash_WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_WREN &rArr; Flash_RdSR1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx_Byte
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RdSR1
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
</UL>

<P><STRONG><a name="[144]"></a>Flash_Write_Bottom</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, i2c.o(i.Flash_Write_Bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Flash_Write_Bottom &rArr; Flash_Page_Write &rArr; Flashaddr &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Rx_Byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
</UL>

<P><STRONG><a name="[140]"></a>Flash_Write_Cycle</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, i2c.o(i.Flash_Write_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Write_Cycle &rArr; Flash_RdSR1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RdSR1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
</UL>

<P><STRONG><a name="[13f]"></a>Flashaddr</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, i2c.o(i.Flashaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Flashaddr &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx_Byte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WREN
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
</UL>

<P><STRONG><a name="[cb]"></a>Four_RpdltoEepromBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, event.o(i.Four_RpdltoEepromBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Four_RpdltoEepromBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[145]"></a>Freeze_Change_Judge</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, tariff.o(i.Freeze_Change_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = Freeze_Change_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeYearClock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
</UL>

<P><STRONG><a name="[b6]"></a>Freeze_Dl</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, money.o(i.Freeze_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
</UL>

<P><STRONG><a name="[149]"></a>Freeze_Judge</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, money.o(i.Freeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = Freeze_Judge &rArr; Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Freeze_Change_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[f6]"></a>Freeze_Pddata</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, money.o(i.Freeze_Pddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = Freeze_Pddata &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[147]"></a>Freeze_Usedl</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, money.o(i.Freeze_Usedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = Freeze_Usedl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
</UL>

<P><STRONG><a name="[a4]"></a>Fwdl_Verify</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, verify.o(i.Fwdl_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Fwdl_Verify &rArr; Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
</UL>

<P><STRONG><a name="[74]"></a>GPIO_Get_InitParam</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, fm32l0xx_gpio.o(i.GPIO_Get_InitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Get_InitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
</UL>

<P><STRONG><a name="[75]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fm32l0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm32l0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WREN
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RdSR1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_I2C_IO
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER2_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterIC_RST0
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Relay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay1
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm32l0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WREN
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RdSR1
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER2_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT2_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT1_IRQHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterIC_RST1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Relay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay1
</UL>

<P><STRONG><a name="[b9]"></a>Gain_Adjust</STRONG> (Thumb, 554 bytes, Stack size 64 bytes, uenergy-at.o(i.Gain_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = Gain_Adjust &rArr; UIP_K &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_K
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051WRPRO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[5c]"></a>GetADCResult</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, init.o(i.GetADCResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetADCResult &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[1e3]"></a>GetBps</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, verify.o(i.GetBps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBps
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
</UL>

<P><STRONG><a name="[136]"></a>GetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u7816.o(i.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GetKey &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
</UL>

<P><STRONG><a name="[130]"></a>GetKeyStatus</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, u7816.o(i.GetKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = GetKeyStatus &rArr; GetKey &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPswBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
</UL>

<P><STRONG><a name="[151]"></a>GetLcdNo</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, uartx.o(i.GetLcdNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetLcdNo
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[150]"></a>GetPswBit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, u7816.o(i.GetPswBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPswBit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
</UL>

<P><STRONG><a name="[94]"></a>GetRecAddr</STRONG> (Thumb, 530 bytes, Stack size 88 bytes, i2c.o(i.GetRecAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = GetRecAddr &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashRec
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[93]"></a>GetRecNum</STRONG> (Thumb, 332 bytes, Stack size 112 bytes, i2c.o(i.GetRecNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashRec
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValtimes
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[63]"></a>GetRtcRTrimVal</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, init.o(i.GetRtcRTrimVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetRtcRTrimVal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[1cf]"></a>GetSetBitNum</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, u7816.o(i.GetSetBitNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetSetBitNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[104]"></a>GetSystemTicks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt.o(i.GetSystemTicks))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Io_Status
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[153]"></a>GetValtimes</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, i2c.o(i.GetValtimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
</UL>

<P><STRONG><a name="[ad]"></a>Get_7816_Char</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, u7816.o(i.Get_7816_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_7816_Char &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[14e]"></a>Get_Err_Data</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, uenergy-at.o(i.Get_Err_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Get_Err_Data &rArr; Bcd2Hex_LS &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_Adjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
</UL>

<P><STRONG><a name="[14d]"></a>Get_Keep_Timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, interrupt.o(i.Get_Keep_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Get_Keep_Timer &rArr; Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[154]"></a>Get_Money_File</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uartx.o(i.Get_Money_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Get_Money_File &rArr; ReadBinWithMac &rArr; Read_Kx &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[158]"></a>Get_RTCTop_Proc</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, uartx.o(i.Get_RTCTop_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Get_RTCTop_Proc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_W_Wdt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>Hex2Bcd</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, rtc.o(i.Hex2Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
</UL>

<P><STRONG><a name="[15a]"></a>Hex2Bcd_Dl</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, money.o(i.Hex2Bcd_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Hex2Bcd_Dl &rArr; Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Overflow
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[99]"></a>Hex2Bcd_Dl_G</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, money.o(i.Hex2Bcd_Dl_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Hex2Bcd_Dl_G &rArr; Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Overflow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Dl_G
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[65]"></a>Hex2Bcd_SS</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rtc.o(i.Hex2Bcd_SS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hex2Bcd_SS &rArr; Hex2Bcd &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[70]"></a>Hex_To_Bcd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.Hex_To_Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockAddOne
</UL>

<P><STRONG><a name="[14c]"></a>Histroy_Freeze_Dl</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, money.o(i.Histroy_Freeze_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Freeze_Change_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
</UL>

<P><STRONG><a name="[14b]"></a>Hour_Freeze_Dl</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, money.o(i.Hour_Freeze_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = Hour_Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
</UL>

<P><STRONG><a name="[15c]"></a>I2C_Read_Bottom</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, i2c.o(i.I2C_Read_Bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Receive_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[98]"></a>I2C_Read_Eeprom</STRONG> (Thumb, 152 bytes, Stack size 168 bytes, i2c.o(i.I2C_Read_Eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
</UL>

<P><STRONG><a name="[b0]"></a>I2C_Read_Eeprom44</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2C_Read_Eeprom44))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
</UL>

<P><STRONG><a name="[160]"></a>I2C_Write_Bottom</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, i2c.o(i.I2C_Write_Bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_end
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>

<P><STRONG><a name="[b5]"></a>I2C_Write_Eeprom</STRONG> (Thumb, 150 bytes, Stack size 296 bytes, i2c.o(i.I2C_Write_Eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynFlashRec
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[b1]"></a>I2C_Write_Eeprom44</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2C_Write_Eeprom44))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
</UL>

<P><STRONG><a name="[15e]"></a>I2c_Receive_Byte</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, i2c.o(i.I2c_Receive_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>

<P><STRONG><a name="[15f]"></a>I2c_Send_Bit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, i2c.o(i.I2c_Send_Bit))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_end
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>

<P><STRONG><a name="[161]"></a>I2c_Send_Byte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, i2c.o(i.I2c_Send_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_end
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
</UL>

<P><STRONG><a name="[118]"></a>I2c_Wait_5ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, init.o(i.I2c_Wait_5ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[166]"></a>IWDT_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, init.o(i.IWDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[bc]"></a>Ib_K</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uenergy-at.o(i.Ib_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = Ib_K &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[90]"></a>InitVolSts</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, money.o(i.InitVolSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = InitVolSts &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[167]"></a>Init_Arm0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.Init_Arm0))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[163]"></a>Init_Meter_Chip</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uenergy-at.o(i.Init_Meter_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = Init_Meter_Chip &rArr; Read_UIP &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[e1]"></a>Init_Metererrstatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, money.o(i.Init_Metererrstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Init_Metererrstatus &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>

<P><STRONG><a name="[16c]"></a>Init_Pad_Io</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(i.Init_Pad_Io))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[d5]"></a>Init_RCHF_Trim</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, init.o(i.Init_RCHF_Trim))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
</UL>

<P><STRONG><a name="[164]"></a>Init_Relay</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, init.o(i.Init_Relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Relay
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[165]"></a>Init_System</STRONG> (Thumb, 714 bytes, Stack size 16 bytes, init.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372<LI>Call Chain = Init_System &rArr; Powerd_Data_Process &rArr; Pd_Hourfreeze_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Clk_Gen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rpdl_Verify
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterIC_RST1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterIC_RST0
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_LCDEN_On
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Meter_Chip
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Pulse
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Led_IO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Pulse
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_None_GPIO
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Judge
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Relay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCHF_Trim
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pad_Io
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Arm0
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>InputtIO</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, verify.o(i.InputtIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InputtIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Pulse
</UL>

<P><STRONG><a name="[11f]"></a>Int2Byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc.o(i.Int2Byte))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
</UL>

<P><STRONG><a name="[84]"></a>Inverse</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, event.o(i.Inverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Inverse
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_G_Dot
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
</UL>

<P><STRONG><a name="[17e]"></a>IsBCD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uartx.o(i.IsBCD))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
</UL>

<P><STRONG><a name="[152]"></a>IsFlashRec</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, i2c.o(i.IsFlashRec))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[134]"></a>IsMultiBcd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartx.o(i.IsMultiBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsMultiBcd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
</UL>

<P><STRONG><a name="[b8]"></a>IxRMSOS_Adjust</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, uenergy-at.o(i.IxRMSOS_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IxRMSOS_Adjust &rArr; ATT7051SPIOp &rArr; EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[17f]"></a>JTRecord</STRONG> (Thumb, 106 bytes, Stack size 88 bytes, uartx.o(i.JTRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = JTRecord &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[181]"></a>JudgeClockNoWeek</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtc.o(i.JudgeClockNoWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeYearClock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
</UL>

<P><STRONG><a name="[117]"></a>JudgeEndClock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uartx.o(i.JudgeEndClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JudgeEndClock &rArr; JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[182]"></a>JudgeSwitch</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uartx.o(i.JudgeSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = JudgeSwitch &rArr; JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
</UL>

<P><STRONG><a name="[183]"></a>JudgeSwitch2</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uartx.o(i.JudgeSwitch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = JudgeSwitch2 &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[146]"></a>JudgeYearClock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tariff.o(i.JudgeYearClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = JudgeYearClock &rArr; JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
</UL>

<P><STRONG><a name="[184]"></a>Judge_645_Frame</STRONG> (Thumb, 890 bytes, Stack size 32 bytes, interrupt.o(i.Judge_645_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Judge_645_Frame &rArr; Judge_MeterId
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RXErr_Proc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IE_Disable_Proc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MeterId
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>Judge_Clock</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, rtc.o(i.Judge_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[eb]"></a>Judge_Edge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, u7816.o(i.Judge_Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Judge_Edge &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[188]"></a>Judge_Io_Status</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, interrupt.o(i.Judge_Io_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Judge_Io_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
</UL>

<P><STRONG><a name="[185]"></a>Judge_MeterId</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, interrupt.o(i.Judge_MeterId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Judge_MeterId
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>

<P><STRONG><a name="[189]"></a>Judge_Min_Space</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, uartx.o(i.Judge_Min_Space))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Judge_Min_Space &rArr; Add_Min_Clock &rArr; ClockAddOne &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[18a]"></a>Judge_Relay_Delay</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, money.o(i.Judge_Relay_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Judge_Relay_Delay &rArr; Calculate_Timer &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
</UL>

<P><STRONG><a name="[12d]"></a>Judge_Uip_Data</STRONG> (Thumb, 2588 bytes, Stack size 48 bytes, uenergy-at.o(i.Judge_Uip_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = Judge_Uip_Data &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Pulse
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Pulse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uShort
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2Short
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPassRate
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Event_Proc
</UL>

<P><STRONG><a name="[18e]"></a>LCD_Num_Data</STRONG> (Thumb, 2208 bytes, Stack size 16 bytes, lcd.o(i.LCD_Num_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Num_Data &rArr; LCD_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Zedl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[18f]"></a>LCD_Table</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcd.o(i.LCD_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>

<P><STRONG><a name="[190]"></a>Ladderdata_Check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tariff.o(i.Ladderdata_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Ladderdata_Check &rArr; Config_ShiQuLad_Proc &rArr; ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
</UL>

<P><STRONG><a name="[10e]"></a>Lcd_Disp_Off</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.Lcd_Disp_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_Disp_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_LCDEN_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[192]"></a>Lcd_Disp_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.Lcd_Disp_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lcd_Disp_On &rArr; Veri_Disp
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Disp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_LCDEN_On
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[194]"></a>Lcd_Disp_Zedl</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, lcd.o(i.Lcd_Disp_Zedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Lcd_Disp_Zedl &rArr; LCD_Num_Data &rArr; LCD_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[16f]"></a>Lcd_Display</STRONG> (Thumb, 3334 bytes, Stack size 96 bytes, lcd.o(i.Lcd_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = Lcd_Display &rArr; Cal_Comb_Usedl &rArr; Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_ZF
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Zedl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time_Dot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_G_Dot
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[191]"></a>Lcd_LCDEN_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.Lcd_LCDEN_Off))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
</UL>

<P><STRONG><a name="[170]"></a>Lcd_LCDEN_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.Lcd_LCDEN_On))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_On
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[11d]"></a>Lcd_Show_N</STRONG> (Thumb, 332 bytes, Stack size 44 bytes, lcd.o(i.Lcd_Show_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Lcd_Show_N &rArr; LCD_Num_Data &rArr; LCD_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_G_Dot
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[195]"></a>Lcd_Show_ZF</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lcd.o(i.Lcd_Show_ZF))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[197]"></a>Lcdled_Control</STRONG> (Thumb, 544 bytes, Stack size 8 bytes, interrupt.o(i.Lcdled_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcdled_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>Load_Judge</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, event.o(i.Load_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = Load_Judge &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Load_Point
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[157]"></a>LoopExchange</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, uartx.o(i.LoopExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoopExchange &rArr; Exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
</UL>

<P><STRONG><a name="[180]"></a>LoopInverse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uartx.o(i.LoopInverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoopInverse &rArr; Inverse
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
</UL>

<P><STRONG><a name="[19a]"></a>MacExchange</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uartx.o(i.MacExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MacExchange &rArr; Exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1d0]"></a>Mac_Err_Proc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, u7816.o(i.Mac_Err_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
</UL>

<P><STRONG><a name="[16e]"></a>MeterIC_RST0</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, verify.o(i.MeterIC_RST0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MeterIC_RST0 &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[179]"></a>MeterIC_RST1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, verify.o(i.MeterIC_RST1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MeterIC_RST1 &rArr; AltFunIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[87]"></a>Meter_Const_Verify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, verify.o(i.Meter_Const_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Meter_Const_Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rpdl_Verify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
</UL>

<P><STRONG><a name="[172]"></a>Mode_Verify</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, verify.o(i.Mode_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = Mode_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ce]"></a>Mt_Alarmstatus_Judge</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, money.o(i.Mt_Alarmstatus_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Mt_Alarmstatus_Judge &rArr; Openrelay &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>Note_Relay_Event</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, event.o(i.Note_Relay_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = Note_Relay_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>

<P><STRONG><a name="[171]"></a>Note_Reset_Number</STRONG> (Thumb, 816 bytes, Stack size 8 bytes, init.o(i.Note_Reset_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Note_Reset_Number &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Judge
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Nv_Ram
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[6c]"></a>Note_Run_Event</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, event.o(i.Note_Run_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uip_Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[132]"></a>Number_Add1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, event.o(i.Number_Add1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Number_Add1 &rArr; Set_Reportdata
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
</UL>

<P><STRONG><a name="[169]"></a>Nvram_Judge</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, init.o(i.Nvram_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Nvram_Judge &rArr; Clear_Nv_Ram
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Nv_Ram
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[bb]"></a>Offset_Adjust</STRONG> (Thumb, 658 bytes, Stack size 128 bytes, uenergy-at.o(i.Offset_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Offset_Adjust &rArr; Get_Err_Data &rArr; Bcd2Hex_LS &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[13d]"></a>OpenFlash</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, i2c.o(i.OpenFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OpenFlash &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
</UL>

<P><STRONG><a name="[19b]"></a>Openrelay</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, money.o(i.Openrelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = Openrelay &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
</UL>

<P><STRONG><a name="[19d]"></a>Openrelay1</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, money.o(i.Openrelay1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Openrelay1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
</UL>

<P><STRONG><a name="[de]"></a>OutputIO</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, verify.o(i.OutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterIC_RST0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[ba]"></a>PH_Adjust</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, uenergy-at.o(i.PH_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PH_Adjust &rArr; Get_Err_Data &rArr; Bcd2Hex_LS &rArr; Bcd2Hex &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Err_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[19e]"></a>Pd_Adc_Calculate</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, interrupt.o(i.Pd_Adc_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = Pd_Adc_Calculate &rArr; Adc_Proc &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelSel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_Enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_Disable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_ChannelSel
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_BypassEn
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_BypassDisable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetTrim
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITDisable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[1a8]"></a>Pd_Calculate_Judge</STRONG> (Thumb, 726 bytes, Stack size 128 bytes, money.o(i.Pd_Calculate_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = Pd_Calculate_Judge &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
</UL>

<P><STRONG><a name="[17b]"></a>Pd_Histroyfreeze_Judge</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, money.o(i.Pd_Histroyfreeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = Pd_Histroyfreeze_Judge &rArr; Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Freeze_Change_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1a9]"></a>Pd_Hourfreeze_Judge</STRONG> (Thumb, 522 bytes, Stack size 112 bytes, money.o(i.Pd_Hourfreeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = Pd_Hourfreeze_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
</UL>

<P><STRONG><a name="[1aa]"></a>PowerError_Check</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, interrupt.o(i.PowerError_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PowerError_Check &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Io_Status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTicks
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[17a]"></a>Powerd_Data_Process</STRONG> (Thumb, 982 bytes, Stack size 128 bytes, init.o(i.Powerd_Data_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356<LI>Call Chain = Powerd_Data_Process &rArr; Pd_Hourfreeze_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uShort
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[17c]"></a>Price_Judge</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, tariff.o(i.Price_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Price_Judge &rArr; Ladderdata_Check &rArr; Config_ShiQuLad_Proc &rArr; ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ca]"></a>Process_Usedl</STRONG> (Thumb, 148 bytes, Stack size 128 bytes, money.o(i.Process_Usedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = Process_Usedl &rArr; Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Hisfreeze
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
</UL>

<P><STRONG><a name="[1ab]"></a>ProgramRecord</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uartx.o(i.ProgramRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = ProgramRecord &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, interrupt.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler &rArr; Lcdled_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelSel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_Enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_Disable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_ChannelSel
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_BypassEn
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUF4TST_BypassDisable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetTrim
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITDisable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>RdHisEvent</STRONG> (Thumb, 1444 bytes, Stack size 176 bytes, uartx.o(i.RdHisEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = RdHisEvent &rArr; ChkPdRcdTime &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_EventTable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
</UL>

<P><STRONG><a name="[1af]"></a>RdHisPd</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, uartx.o(i.RdHisPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = RdHisPd &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[be]"></a>RdRecTimes</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, event.o(i.RdRecTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValtimes
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[1b0]"></a>Rd_Relay_Buy_Rec</STRONG> (Thumb, 2346 bytes, Stack size 624 bytes, uartx.o(i.Rd_Relay_Buy_Rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = Rd_Relay_Buy_Rec &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Ah
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_EventTable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[116]"></a>ReadBinFile</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, u7816.o(i.ReadBinFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadBinFile &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[156]"></a>ReadBinWithMac</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, u7816.o(i.ReadBinWithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadBinWithMac &rArr; Read_Kx &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
</UL>

<P><STRONG><a name="[e3]"></a>ReadE2WithBackup</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, i2c.o(i.ReadE2WithBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Psw
</UL>

<P><STRONG><a name="[b2]"></a>ReadE2WithJieti</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tariff.o(i.ReadE2WithJieti))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
</UL>

<P><STRONG><a name="[1b2]"></a>ReadFreezedRec</STRONG> (Thumb, 1060 bytes, Stack size 464 bytes, uartx.o(i.ReadFreezedRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = ReadFreezedRec &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashRec
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1b3]"></a>ReadLoadRec</STRONG> (Thumb, 1960 bytes, Stack size 312 bytes, event.o(i.ReadLoadRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = ReadLoadRec &rArr; FindSpecPos &rArr; GetRecAddr &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[7d]"></a>ReadRandom</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, u7816.o(i.ReadRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReadRandom &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
</UL>

<P><STRONG><a name="[155]"></a>ReadRecFile</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, u7816.o(i.ReadRecFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadRecFile &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
</UL>

<P><STRONG><a name="[1ae]"></a>Read_Event_Number</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, event.o(i.Read_Event_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Read_Event_Number &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[bf]"></a>Read_Event_Point</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, event.o(i.Read_Event_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPdRcdTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[7b]"></a>Read_Kx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, u7816.o(i.Read_Kx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_Kx &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
</UL>

<P><STRONG><a name="[f0]"></a>Read_Rtc</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, rtc.o(i.Read_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Read_Rtc &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[174]"></a>Read_Sysclock</STRONG> (Thumb, 2032 bytes, Stack size 24 bytes, rtc.o(i.Read_Sysclock))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = Read_Sysclock &rArr; UpdateEsamKey &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[12c]"></a>Read_UIP</STRONG> (Thumb, 1938 bytes, Stack size 96 bytes, uenergy-at.o(i.Read_UIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = Read_UIP &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIPF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Event_Proc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Meter_Chip
</UL>

<P><STRONG><a name="[f9]"></a>Read_UIPF</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uenergy-at.o(i.Read_UIPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_UIPF &rArr; ATT7051SPIOp &rArr; EmuRegOp &rArr; UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_K
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
</UL>

<P><STRONG><a name="[19c]"></a>Read_Uip_Data</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, event.o(i.Read_Uip_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Uip_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
</UL>

<P><STRONG><a name="[1b6]"></a>Ready_Reportdata</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, uartx.o(i.Ready_Reportdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ready_Reportdata
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
</UL>

<P><STRONG><a name="[b4]"></a>RefreshPrice</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tariff.o(i.RefreshPrice))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[1b7]"></a>Relay_Ctrl</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, uartx.o(i.Relay_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = Relay_Ctrl &rArr; Enable_Closerelay &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Commu_Relaydata
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1b8]"></a>Relaystatus_Check</STRONG> (Thumb, 656 bytes, Stack size 16 bytes, iokey.o(i.Relaystatus_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Relaystatus_Check &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[ff]"></a>ReportEvent</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uartx.o(i.ReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = ReportEvent &rArr; ReportProc &rArr; RdHisEvent &rArr; ChkPdRcdTime &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportProc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[1b9]"></a>ReportProc</STRONG> (Thumb, 834 bytes, Stack size 280 bytes, uartx.o(i.ReportProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = ReportProc &rArr; RdHisEvent &rArr; ChkPdRcdTime &rArr; RdRecTimes &rArr; GetValtimes &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Byte
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEvent
</UL>

<P><STRONG><a name="[1ba]"></a>Report_Response</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, uartx.o(i.Report_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Report_Response &rArr; Clr_Reportdata
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportdata
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1bb]"></a>Reset</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, interrupt.o(i.Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = Reset &rArr; Read_Sysclock &rArr; UpdateEsamKey &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_IO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Min
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[a0]"></a>Rpdl_Verify</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, verify.o(i.Rpdl_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Rpdl_Verify &rArr; Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[78]"></a>RxTxCommhead</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, u7816.o(i.RxTxCommhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RxTxCommhead
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
</UL>

<P><STRONG><a name="[1bd]"></a>SCover_Check</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, interrupt.o(i.SCover_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCover_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[13b]"></a>SPI_Rx_Byte</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, i2c.o(i.SPI_Rx_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RdSR1
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
</UL>

<P><STRONG><a name="[13a]"></a>SPI_Tx_Byte</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, i2c.o(i.SPI_Tx_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashaddr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WREN
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RdSR1
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID
</UL>

<P><STRONG><a name="[1dd]"></a>SVD_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.SVD_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_SVD_Ctrl
</UL>

<P><STRONG><a name="[1df]"></a>SVD_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.SVD_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_SVD_Ctrl
</UL>

<P><STRONG><a name="[7]"></a>SVD_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interrupt.o(i.SVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>SVD_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm32l0xx_anac.o(i.SVD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_SVD_Ctrl
</UL>

<P><STRONG><a name="[e7]"></a>Save_Keep_Timer</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, interrupt.o(i.Save_Keep_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
</UL>

<P><STRONG><a name="[1be]"></a>Sclock_Event_Proc</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, mainproc.o(i.Sclock_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Sclock_Event_Proc &rArr; Mode_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rpdl_Verify
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>SelectFile</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, u7816.o(i.SelectFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SelectFile &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[15d]"></a>Sendaddr</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, i2c.o(i.Sendaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>

<P><STRONG><a name="[138]"></a>Sequence</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tariff.o(i.Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sequence &rArr; Cmp_Bcd_Inv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
</UL>

<P><STRONG><a name="[137]"></a>SetKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, u7816.o(i.SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
</UL>

<P><STRONG><a name="[1c0]"></a>Set_Comm_Rate</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, uartx.o(i.Set_Comm_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = Set_Comm_Rate &rArr; UpdateSysPara &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[12e]"></a>Set_Reportdata</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, uartx.o(i.Set_Reportdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Err_Report
</UL>

<P><STRONG><a name="[f1]"></a>Set_Rtc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, rtc.o(i.Set_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Set_Rtc &rArr; Read_Rtc &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[1c1]"></a>ShiquRecord</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, uartx.o(i.ShiquRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ShiquRecord &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1e4]"></a>Short2Byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc.o(i.Short2Byte))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
</UL>

<P><STRONG><a name="[100]"></a>Sleep</STRONG> (Thumb, 1588 bytes, Stack size 16 bytes, interrupt.o(i.Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = Sleep &rArr; Lcd_Display &rArr; Cal_Comb_Usedl &rArr; Cal_Comb &rArr; GetRecNum &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEvent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_I2C_IO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCover_Check
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_On
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTicks
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSleepCFG
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Min
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ac]"></a>Snd_7816_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, u7816.o(i.Snd_7816_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[1c3]"></a>Starttimer_Verify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, verify.o(i.Starttimer_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Starttimer_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[1c2]"></a>Store_Data</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, interrupt.o(i.Store_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = Store_Data &rArr; Read_Sysclock &rArr; UpdateEsamKey &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Pulse
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEsam
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[68]"></a>Store_Meterstatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iokey.o(i.Store_Meterstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
</UL>

<P><STRONG><a name="[148]"></a>SynEeprom</STRONG> (Thumb, 572 bytes, Stack size 680 bytes, i2c.o(i.SynEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
</UL>

<P><STRONG><a name="[c3]"></a>SynFlashRec</STRONG> (Thumb, 454 bytes, Stack size 280 bytes, i2c.o(i.SynFlashRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = SynFlashRec &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Bottom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Rd_Bottom
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
</UL>

<P><STRONG><a name="[f3]"></a>Syn_Clock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtc.o(i.Syn_Clock))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Hourfreeze_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_fm32l0xx3.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2372<LI>Call Chain = SystemInit &rArr; main &rArr; Comm_Event_Proc &rArr; Uart_Proc &rArr; JudgeSwitch2 &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>SystemTicksInterval</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.SystemTicksInterval))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_end
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Cycle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Io_Status
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadByte
</UL>

<P><STRONG><a name="[135]"></a>Temperpara_Verify</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, verify.o(i.Temperpara_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Temperpara_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
</UL>

<P><STRONG><a name="[1c4]"></a>TicksDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_fm32l0xx3.o(i.TicksDelay))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
</UL>

<P><STRONG><a name="[ea]"></a>TicksDelayMs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system_fm32l0xx3.o(i.TicksDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[119]"></a>TicksDelayUs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_fm32l0xx3.o(i.TicksDelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Adc_Calculate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
</UL>

<P><STRONG><a name="[175]"></a>Timezone_Judge</STRONG> (Thumb, 524 bytes, Stack size 72 bytes, tariff.o(i.Timezone_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204<LI>Call Chain = Timezone_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feik_Num_Verify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Week_Holiday_Verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Starttimer_Verify
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1c7]"></a>Tx_645_Frame</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, interrupt.o(i.Tx_645_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tx_645_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, interrupt.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_IRQHandler &rArr; Judge_645_Frame &rArr; Judge_MeterId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, interrupt.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART1_IRQHandler &rArr; Judge_645_Frame &rArr; Judge_MeterId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, interrupt.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART2_IRQHandler &rArr; Judge_645_Frame &rArr; Judge_MeterId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART5_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, interrupt.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART5_IRQHandler &rArr; Judge_645_Frame &rArr; Judge_MeterId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>UIP_K</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, uenergy-at.o(i.UIP_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = UIP_K &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIPF
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Adjust
</UL>

<P><STRONG><a name="[127]"></a>UartReadByte</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uenergy-at.o(i.UartReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuRegOp
</UL>

<P><STRONG><a name="[126]"></a>UartWriteByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uenergy-at.o(i.UartWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuRegOp
</UL>

<P><STRONG><a name="[186]"></a>Uart_IE_Disable_Proc</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, interrupt.o(i.Uart_IE_Disable_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>

<P><STRONG><a name="[fe]"></a>Uart_Proc</STRONG> (Thumb, 41502 bytes, Stack size 1232 bytes, uartx.o(i.Uart_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2356<LI>Call Chain = Uart_Proc &rArr; JudgeSwitch2 &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashID_Comm
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_Dl_G
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_SS
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Four_RpdltoEepromBuf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_RpdltoEepromBuf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsMin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Byte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_LS
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RTC_RT_TAdc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkLastclockerrRcdTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uShort
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2uInt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectFile
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBCD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalLoad
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommReadCalData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Psw
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Comm_Rate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisPd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacExchange
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdNo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_EventTable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Auth_Judge
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
</UL>

<P><STRONG><a name="[187]"></a>Uart_RXErr_Proc</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, interrupt.o(i.Uart_RXErr_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>

<P><STRONG><a name="[1ca]"></a>UpdataRunFile</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, u7816.o(i.UpdataRunFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UpdataRunFile &rArr; UpdateBinFile &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1ce]"></a>UpdateBinFile</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, u7816.o(i.UpdateBinFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UpdateBinFile &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
</UL>

<P><STRONG><a name="[1c9]"></a>UpdateEepromKey</STRONG> (Thumb, 916 bytes, Stack size 144 bytes, u7816.o(i.UpdateEepromKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = UpdateEepromKey &rArr; SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetBitNum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPswBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1b4]"></a>UpdateEsamKey</STRONG> (Thumb, 484 bytes, Stack size 72 bytes, u7816.o(i.UpdateEsamKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = UpdateEsamKey &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPswBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[106]"></a>UpdateSysPara</STRONG> (Thumb, 258 bytes, Stack size 104 bytes, uartx.o(i.UpdateSysPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = UpdateSysPara &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Comm_Rate
</UL>

<P><STRONG><a name="[114]"></a>Update_ESAM_Bin_Mac</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, u7816.o(i.Update_ESAM_Bin_Mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Update_ESAM_Bin_Mac &rArr; WriteBinWithMac &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mac_Err_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[1d1]"></a>Vector_Event_Proc</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, mainproc.o(i.Vector_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = Vector_Event_Proc &rArr; Freeze_Judge &rArr; Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Freeze_Change_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commmodule_Check
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>Veri_Btmr1</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, verify.o(i.Veri_Btmr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Btmr1 &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[cc]"></a>Veri_Btmr1_Pcount</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, verify.o(i.Veri_Btmr1_Pcount))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[1d7]"></a>Veri_Btmr2</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, verify.o(i.Veri_Btmr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Btmr2 &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[cd]"></a>Veri_Btmr2_Pcount</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, verify.o(i.Veri_Btmr2_Pcount))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[16b]"></a>Veri_Clk_Gen</STRONG> (Thumb, 180 bytes, Stack size 36 bytes, verify.o(i.Veri_Clk_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Veri_Clk_Gen
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[193]"></a>Veri_Disp</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, verify.o(i.Veri_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Veri_Disp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_On
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1d8]"></a>Veri_Etmr2</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, verify.o(i.Veri_Etmr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Etmr2 &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1d9]"></a>Veri_Etmr4</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, verify.o(i.Veri_Etmr4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Etmr4 &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1da]"></a>Veri_I2c</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, verify.o(i.Veri_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Veri_I2c
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[16d]"></a>Veri_Pad</STRONG> (Thumb, 932 bytes, Stack size 8 bytes, verify.o(i.Veri_Pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Veri_Pad &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1cb]"></a>Veri_Psw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uartx.o(i.Veri_Psw))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Veri_Psw &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1db]"></a>Veri_Rtc</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, verify.o(i.Veri_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Rtc &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1dc]"></a>Veri_SVD_Ctrl</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, verify.o(i.Veri_SVD_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Veri_SVD_Ctrl &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVD_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVD_Enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVD_Disable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1e0]"></a>Veri_Spi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, verify.o(i.Veri_Spi))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[168]"></a>Veri_Sys_Reg</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, verify.o(i.Veri_Sys_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Veri_Sys_Reg &rArr; Veri_Pad &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Get_InitParam
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Disp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Clk_Gen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2_Pcount
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1_Pcount
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Wwdt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_U7816
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Spi
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_SVD_Ctrl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_I2c
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1e1]"></a>Veri_U7816</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, verify.o(i.Veri_U7816))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Veri_U7816
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[173]"></a>Veri_Uart_All</STRONG> (Thumb, 690 bytes, Stack size 8 bytes, verify.o(i.Veri_Uart_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Veri_Uart_All &rArr; Ble_Rst &rArr; Delay_Initial &rArr; I2c_Wait_5ms &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Rst
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBps
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1e2]"></a>Veri_Wwdt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, verify.o(i.Veri_Wwdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Wwdt &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNvicIrqEn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[88]"></a>Verify_Dl</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, verify.o(i.Verify_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rpdl_Verify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
</UL>

<P><STRONG><a name="[102]"></a>Verify_para</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, verify.o(i.Verify_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feik_Num_Verify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Week_Holiday_Verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Starttimer_Verify
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Reg_Verify
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Para_Verify
</UL>

<P><STRONG><a name="[18d]"></a>VolPassRate</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, money.o(i.VolPassRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = VolPassRate &rArr; InitVolSts &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolSts
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_SS
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte2Short
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Uip_Data
</UL>

<P><STRONG><a name="[6]"></a>WWDT_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.WWDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_W_Wdt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>WWDT_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init.o(i.WWDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[162]"></a>Wait_for_end</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2c.o(i.Wait_for_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wait_for_end
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTicksInterval
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
</UL>

<P><STRONG><a name="[1c6]"></a>Week_Holiday_Verify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, verify.o(i.Week_Holiday_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Week_Holiday_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[cf]"></a>Wr_Powerdown_Data</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, interrupt.o(i.Wr_Powerdown_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Wr_Powerdown_Data &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short2Byte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[d1]"></a>Wr_Pretime_Dayfreeze</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, money.o(i.Wr_Pretime_Dayfreeze))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[d0]"></a>Wr_Pretime_Hisfreeze</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, money.o(i.Wr_Pretime_Hisfreeze))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Wr_Pretime_Hisfreeze &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[115]"></a>WriteBinWithMac</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, u7816.o(i.WriteBinWithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteBinWithMac &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[80]"></a>WriteE2WithBackup</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, i2c.o(i.WriteE2WithBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynEeprom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_K
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ib_K
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Para_7051
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWriteCalData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Err_Pro
</UL>

<P><STRONG><a name="[b3]"></a>WriteE2WithJieti</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tariff.o(i.WriteE2WithJieti))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = WriteE2WithJieti &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits_Add2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
</UL>

<P><STRONG><a name="[f5]"></a>Write_Event_Point</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, event.o(i.Write_Event_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashRec
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Calculate_Judge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Pddata
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[199]"></a>Write_Load_Point</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, event.o(i.Write_Load_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Write_Load_Point &rArr; Crc_16Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
</UL>

<P><STRONG><a name="[1b5]"></a>Xor_Data</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uartx.o(i.Xor_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Xor_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Response
</UL>

<P><STRONG><a name="[1c8]"></a>Yc_Auth</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, uartx.o(i.Yc_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Yc_Auth &rArr; Authorization &rArr; Auth_In_Out &rArr; CardTxRxFrame &rArr; Snd_7816_Byte &rArr; Delay_Netu &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Meter_Id
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[15b]"></a>Year_Ladder_Judge</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tariff.o(i.Year_Ladder_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164<LI>Call Chain = Year_Ladder_Judge &rArr; Freeze_Change_Judge &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeYearClock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
</UL>

<P><STRONG><a name="[4d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[fb]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uartx.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Dl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Calculate_Comp_Rp
</UL>

<P><STRONG><a name="[6f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm32l0xx_rcc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNClock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
</UL>

<P><STRONG><a name="[1fb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1fc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c5]"></a>feik_Num_Verify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, verify.o(i.feik_Num_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = feik_Num_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[28]"></a>isPowerOff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init.o(i.isPowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u7816.o(i.ColdReset)
</UL>
<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mainproc.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2364<LI>Call Chain = main &rArr; Comm_Event_Proc &rArr; Uart_Proc &rArr; JudgeSwitch2 &rArr; Freeze_Dl &rArr; SynEeprom &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Event_Proc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Arm0
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[177]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[178]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[17d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_And_ClearIRQ
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[db]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER2_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_And_ClearIRQ
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[110]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[10f]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupt.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[1d4]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, verify.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Wwdt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_SVD_Ctrl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1
</UL>

<P><STRONG><a name="[1d6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, verify.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Wwdt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1
</UL>

<P><STRONG><a name="[1d5]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, verify.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Wwdt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_SVD_Ctrl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Btmr1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
