方法一：深度优先搜索 + 三色标记法
根据题意，若起始节点位于一个环内，或者能到达一个环，则该节点不是安全的。否则，该节点是安全的。
我们可以使用深度优先搜索来找环，并在深度优先搜索时，用三种颜色对节点进行标记，标记的规则如下：
白色（用 00 表示）：该节点尚未被访问；
灰色（用 11 表示）：该节点位于递归栈中，或者在某个环上；
黑色（用 22 表示）：该节点搜索完毕，是一个安全节点。
当我们首次访问一个节点时，将其标记为灰色，并继续搜索与其相连的节点。
如果在搜索过程中遇到了一个灰色节点，则说明找到了一个环，此时退出搜索，栈中的节点仍保持为灰色，
这一做法可以将「找到了环」这一信息传递到栈中的所有节点上。
如果搜索过程中没有遇到灰色节点，则说明没有遇到环，那么递归返回前，我们将其标记由灰色改为黑色，即表示它是一个安全的节点。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/find-eventual-safe-states/solution/zhao-dao-zui-zhong-de-an-quan-zhuang-tai-yzfz/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

方法二：拓扑排序
根据题意，若一个节点没有出边，则该节点是安全的；若一个节点出边相连的点都是安全的，则该节点也是安全的。
根据这一性质，我们可以将图中所有边反向，得到一个反图，然后在反图上运行拓扑排序。
具体来说，首先得到反图 \textit{rg}rg 及其入度数组 \textit{inDeg}inDeg。将所有入度为 00 的点加入队列，
然后不断取出队首元素，将其出边相连的点的入度减一，若该点入度减一后为 00，则将该点加入队列，如此循环直至队列为空。
循环结束后，所有入度为 00 的节点均为安全的。我们遍历入度数组，并将入度为 00 的点加入答案列表。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/find-eventual-safe-states/solution/zhao-dao-zui-zhong-de-an-quan-zhuang-tai-yzfz/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。