方法一：回溯
思路与算法

设函数check(i,j,k) 表示判断以网格的(i,j)位置出发，能否搜索到单词word[k..]，其中word[k..] 表示字符串word 从第k个字符开始的后缀子串。
如果能搜索到，则返回true，反之返回false。函数check(i,j,k) 的执行步骤如下：
*如果board[i][j]=s[k]，当前字符不匹配，直接返回false。
*如果当前已经访问到字符串的末尾，且对应字符依然匹配，此时直接返回true。
*否则，遍历当前位置的所有相邻位置。如果从某个相邻位置出发，能够搜索到子串word[k+1..]，则返回true，否则返回false。

这样，我们对每一个位置(i,j) 都调用函数check(i,j,0) 进行检查：只要有一处返回true，就说明网格中能够找到相应的单词，否则说明不能找到。

为了防止重复遍历相同的位置，需要额外维护一个与board 等大的visited 数组，用于标识每个位置是否被访问过。
每次遍历相邻位置时，需要跳过已经被访问的位置。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/word-search/solution/dan-ci-sou-suo-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。